# -*- coding: utf-8 -*-
"""Music_Recommendation_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r9IhECTxM66IPVJcUguPdgKO-s3GXT-N

### **Music Recommendation System**

**Importing library and files**
"""

import pandas as pd 
import numpy as np

df = pd.read_csv("music_dataset1.csv")

"""**Description of DataSet**"""

df.columns

df.head()

df.shape

"""**Data Preprocessing**

* Removing duplicate and null values
"""

df.isna().sum()

df = df.dropna()

df.duplicated().sum()

df.drop_duplicates()

df.shape

"""* Removing unnecessary data"""

df = df[['Song','Performer','spotify_genre','danceability','energy','key','loudness','acousticness','tempo','instrumentalness','liveness']]

df.head()

"""**Data filtering and processing**"""

df.Song = df.Song.str.replace('.', '')

df['spotify_genre'] = df['spotify_genre'].apply(lambda x: x.replace(" ",""))
df['spotify_genre']

df.Performer = df.Performer.str.replace(' ', '')
df["Performer"]

df['tags'] = df['spotify_genre'] + df['Performer']

df['tags'] = df['tags'].str.lower()
df['tags'] = df['tags'].str.replace("[",",")
df['tags'] = df['tags'].str.replace("]",",")
df['tags'] = df['tags'].str.replace("'","")
df['tags'] = df['tags'].str.replace(","," ")
df['tags'] = df['tags'].str.replace("featuring"," ",)
df['tags']

new_df = df[['Song','tags','Performer']]
new_df

"""**Vectorizer**"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=14000)

vectors = cv.fit_transform(new_df['tags']).toarray()

vectors.shape

cv.get_feature_names()

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors)

similarity[0]

sorted(list(enumerate(similarity[0])),reverse = True, key = lambda x:x[1])[1:6]
# shows similarity of song at 0 index to song at other index in descending manner and shows only 5 song [1:6]

def recommend(song_name):
  new_new_df = new_df.copy(deep=True)
  new_new_df['Song'] = new_new_df['Song'].str.lower()
  song_name = str(song_name).lower()
  t_df = new_new_df[new_new_df['Song'] == song_name]
  if(len(t_df)==0):
    print("Song not found in database so can't recommend...")
    return
  song_index = new_new_df[new_new_df['Song'] == song_name].index[0]
  distance = similarity[song_index]
  song_list = sorted(list(enumerate(distance)),reverse = True, key = lambda x:x[1])[1:6]
  for i in song_list:
    print("Song name: ", new_df.iloc[i[0]].Song)
    print("Artist name: ", new_df.iloc[i[0]].Performer, "\n")

recommend("Sawaan mein lag gae aag")

recommend("BAby one More Time")